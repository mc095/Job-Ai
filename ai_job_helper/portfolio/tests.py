from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth.models import User
from .models import Portfolio


class PortfolioFlowTests(TestCase):
    def setUp(self):
        self.client = Client()
        self.user = User.objects.create_user(username="tester", password="pass12345", email="t@example.com")
        self.client.login(username="tester", password="pass12345")

    def _valid_form_payload(self):
        return {
            # Personal
            "name": "Test User",
            "titles": "Software Engineer\nFull Stack Developer",
            "bio": "Engineer passionate about building reliable systems.",
            "location": "City, Country",
            # Contact
            "email": "t@example.com",
            "phone": "+1 555-0000",
            # Socials
            "github_url": "https://github.com/test",
            "linkedin_url": "https://linkedin.com/in/test",
            "website_url": "https://example.com",
            "twitter_url": "https://twitter.com/test",
            # Hidden structured fields generated by the UI builders
            "skills": "Python, Django, React",
            "experience": "Acme Corp | Backend Engineer | 2022â€“Present | Built APIs\nBeta LLC | Intern | 2021 | Wrote tests",
            "education": "Uni X | BSc CS | 2021 | 3.8",
            "projects": "SiteGen | Static site generator | Built tool to scaffold sites | Python, Jinja | https://example.com | https://github.com/test/sitegen",
            "certifications": "AWS SAA | Amazon | 2023",
            # Optional images
            "profile_image_small": "https://placehold.co/60",
            "profile_image_large": "https://placehold.co/300x300",
        }

    def test_create_select_download_flow(self):
        # Create portfolio data
        resp = self.client.post(reverse("create_portfolio"), data=self._valid_form_payload(), follow=True)
        self.assertEqual(resp.status_code, 200)
        self.assertTrue(Portfolio.objects.filter(user=self.user).exists())

        # Select template
        # pick a valid template id from models
        from .models import PORTFOLIO_TEMPLATES
        valid_template = PORTFOLIO_TEMPLATES[0]['id']
        resp = self.client.post(reverse("select_template"), data={"template": valid_template}, follow=True)
        self.assertEqual(resp.status_code, 200)
        p = Portfolio.objects.get(user=self.user)
        self.assertTrue(bool(p.selected_template))

        # Download portfolio
        resp = self.client.get(reverse("download_portfolio"))
        self.assertEqual(resp.status_code, 200)
        self.assertIn("text/html", resp["Content-Type"]) 
        self.assertGreater(len(resp.content), 100)


